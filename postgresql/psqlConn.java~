import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;

public class psqlConn{

	public static void main(String[] args){

		Connection conn = null;
		PreparedStatement studInsert;
		PreparedStatement profInsert;
		PreparedStatement CourseInsrt;
		PreparedStatement TeachInsert;
		PreparedStatement TransInsert;
		Comparable[][][] result;

		try{

			Class.forName("org.postgresql.Driver");
			conn = DriverManager.getConnection("jdbc:postgresql://localhost/Brandon", "Brandon", "");
			System.out.println("Database successfully coneccted to!");


			studInsert = conn.prepareStatement("INSERT INTO Student(id, name, addr, status) VALUES(?,?,?,?)");
			profInsert = conn.prepareStatement("INSERT INTO Professor(id, name, deptid) VALUES(?,?,?)");
			CourseInsrt = conn.prepareStatement("INSERT INTO Course(crsCode, deptid, crsName, descr) VALUES(?,?,?,?)");
			TeachInsert = conn.prepareStatement("INSERT INTO Teaching(crsCode, semester, profid) VALUES(?,?,?)");
			TransInsert = conn.prepareStatement("INSERT INTO Transcript(studid, crsCode, semester, grade) VALUES(?,?,?,?)");

			TupleGenerator gen = new TupleGeneratorImpl();

			gen.addRelSchema ("Student",
				"id name address status",
				"Integer String String String",
				"id",
				null);

			gen.addRelSchema ("Professor",
				"id name deptId",
				"Integer String String",
				"id",
				null);

			gen.addRelSchema ("Course",
				"crsCode deptId crsName descr",
				"String String String String",
				"crsCode",
				null);

			gen.addRelSchema ("Teaching",
				"crsCode semester profId",
				"String String Integer",
				"crcCode semester",
				new String [][] {{ "profId", "Professor", "id" },
				{ "crsCode", "Course", "crsCode" }});

			gen.addRelSchema ("Transcript",
				"studId crsCode semester grade",
				"Integer String String String",
				"studId crsCode semester",
				new String [][] {{ "studId", "Student", "id"},
				{ "crsCode", "Course", "crsCode" },
				{ "crsCode semester", "Teaching", "crsCode semester" }});


			int[] numTups = new int[] {500000, 500000, 500000, 500000, 500000}

			result = gen.generate(numTups);


			for (int i = 0; i < result[0].length; i++) {
				insert_student.setInt(1, (int) result[0][i][0]);
				insert_student.setString(2, result[0][i][1].toString());
				insert_student.setString(3, result[0][i][2].toString());
				insert_student.setString(4, result[0][i][3].toString());
				insert_student.execute();
			}

			for (int i = 0; i < result[1].length; i++) {
				insert_professor.setInt(1, (int) result[1][i][0]);
				insert_professor.setString(2, result[1][i][1].toString());
				insert_professor.setString(3, result[1][i][2].toString());
				insert_professor.execute();
			}

			for (int i = 0; i < result[2].length; i++) {
				insert_course.setString(1, result[2][i][0].toString());
				insert_course.setString(2, result[2][i][1].toString());
				insert_course.setString(3, result[2][i][2].toString());
				insert_course.setString(4, result[2][i][3].toString());
				insert_course.execute();
			}

			for (int i = 0; i < result[3].length; i++) {
				insert_teaching.setString(1, result[3][i][0].toString());
				insert_teaching.setString(2, result[3][i][1].toString());
				insert_teaching.setInt(3, (int) result[3][i][2]);
				insert_teaching.execute();
			}

			for (int i = 0; i < result[4].length; i++) {
				insert_transcript.setInt(1, (int) result[4][i][0]);
				insert_transcript.setString(2, result[4][i][1].toString());
				insert_transcript.setString(3, result[4][i][2].toString());
				insert_transcript.setString(4, result[4][i][3].toString());
				insert_transcript.execute();
			}


		} catch (Exception e){

			e.printStackTrace();

		}


	}

}



